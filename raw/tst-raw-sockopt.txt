The behaviour of getsockopt() for CAN_RAW_FILTER has been improved to provide
the needed buffer length for the CAN_RAW filter set in userspace.

The former reaction from the kernel when a buffer was provided that was not
able to contain the existing filter set was to silently truncate the filter
set to the given buffer:

$ raw/tst-raw-sockopt
setsockopt: write 128 byte -> Success
getsockopt1: read 128 byte into 128 byte buffer -> Success
getsockopt2: read 128 byte into 160 byte buffer -> Success
getsockopt3: read 128 byte into 80 byte buffer -> Success
getsockopt3: buffer too small for filter but no error

The improved reaction from the kernel when a buffer was provided that was not
able to contain the existing filter set is to return '-1', set the errno to
ERANGE and to provide the needed buffer size in the optlen variable.
This allows to retry the getsockopt() syscall with a valid buffer size:

$ raw/tst-raw-sockopt
setsockopt: write 128 byte -> Success
getsockopt1: read 128 byte into 128 byte buffer -> Success
getsockopt2: read 128 byte into 160 byte buffer -> Success
getsockopt3: read 128 byte into 80 byte buffer -> Numerical result out of range
getsockopt4: read 128 byte into 128 byte buffer -> Success

The patch below implements the improvement and can be applied to all
Linux kernels since mainline upstream (2.6.25).

From c473ea36b003ef7ac0468087cef687daac4ddbba Mon Sep 17 00:00:00 2001
From: Oliver Hartkopp <socketcan@hartkopp.net>
Date: Wed, 16 Dec 2020 18:18:22 +0100
Subject: [PATCH] can: raw: return -ERANGE when filterset does not fit into user space buffer

Multiple filters (struct can_filter) can be set with the setsockopt()
function, which was originally intended as a write-only operation.

As getsockopt() also provides a CAN_RAW_FILTER option to read back the
given filters, the caller has to provide an appropriate user space buffer.
In the case this buffer is too small the getsockopt() silently truncates
the filter information and gives no information about the needed space.
This is safe but not convenient for the programmer.

In net/core/sock.c the SO_PEERGROUPS sockopt had a similar requirement
and solved it by returning -ERANGE in the case that the provided data
does not fit into the given user space buffer and fills the required size
into optlen, so that the caller can retry with a matching buffer length.

This patch adopts this approach for CAN_RAW_FILTER getsockopt().

Reported-by: Phillip Schichtel <phillip@schich.tel>
Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
---
 net/can/raw.c | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/net/can/raw.c b/net/can/raw.c
index 6ec8aa1d0da4..37b47a39a3ed 100644
--- a/net/can/raw.c
+++ b/net/can/raw.c
@@ -663,14 +663,22 @@ static int raw_getsockopt(struct socket *sock, int level, int optname,
 	case CAN_RAW_FILTER:
 		lock_sock(sk);
 		if (ro->count > 0) {
 			int fsize = ro->count * sizeof(struct can_filter);
 
-			if (len > fsize)
-				len = fsize;
-			if (copy_to_user(optval, ro->filter, len))
-				err = -EFAULT;
+			/* user space buffer to small for filter list? */
+			if (len < fsize) {
+				/* return -ERANGE and needed space in optlen */
+				err = -ERANGE;
+				if (put_user(fsize, optlen))
+					err = -EFAULT;
+			} else {
+				if (len > fsize)
+					len = fsize;
+				if (copy_to_user(optval, ro->filter, len))
+					err = -EFAULT;
+			}
 		} else {
 			len = 0;
 		}
 		release_sock(sk);
 
-- 
2.29.2

